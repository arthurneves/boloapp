async function registerServiceWorker(){if(!("serviceWorker"in navigator))return null;try{const t=await navigator.serviceWorker.getRegistration();if(t&&t.active)return t;const i=await navigator.serviceWorker.getRegistrations();for(let t of i)await t.unregister();const a=await navigator.serviceWorker.register("/service-worker.js",{scope:"/"});return a.waiting&&a.waiting.postMessage({type:"SKIP_WAITING"}),a.active||await new Promise((t=>{a.addEventListener("activate",(i=>{t()}))})),a}catch(t){return null}}function updateNotificationStatus(t,i=!1){const a=document.getElementById("notification-status");a&&(a.textContent=t,a.style.color=i?"#dc3545":"#ffffff")}async function requestNotificationPermission(){if(!("Notification"in window))return updateNotificationStatus("Navegador não suporta notificações",!0),!1;if("granted"===Notification.permission)return!0;if("denied"!==Notification.permission){updateNotificationStatus("Aguardando permissão...");return"granted"===await Notification.requestPermission()}return updateNotificationStatus("Permissão negada",!0),!1}class NotificationCache{static CACHE_KEY="notification_subscription_cache";static CACHE_DURATION=864e5;static async get(){try{const t=localStorage.getItem(this.CACHE_KEY);if(!t)return null;const i=JSON.parse(t);return i&&i.timestamp&&i.subscription?i:null}catch(t){return null}}static async set(t){try{const i={timestamp:Date.now(),subscription:t.toJSON()};return localStorage.setItem(this.CACHE_KEY,JSON.stringify(i)),!0}catch(t){return!1}}static async hasValidCache(){const t=await this.get();return!!t&&!this.isExpired(t)}static isExpired(t){return Date.now()-t.timestamp>this.CACHE_DURATION}static async clear(){try{return localStorage.removeItem(this.CACHE_KEY),!0}catch(t){return!1}}}let vapidKeyCache=null;async function getVapidPublicKey(){try{if(vapidKeyCache)return vapidKeyCache;updateNotificationStatus("Obtendo chave de registro...");const t=await fetch("/api/notificacoes/vapid-public-key");if(!t.ok)throw new Error("Falha ao obter chave VAPID");const i=await t.json();if(!i.publicKey)throw new Error("Chave VAPID não encontrada na resposta");return vapidKeyCache=i.publicKey,vapidKeyCache}catch(t){throw updateNotificationStatus("Erro ao obter chave de registro",!0),t}}function areSubscriptionsEqual(t,i){if(!t||!i)return!1;const a="function"==typeof t.toJSON?t.toJSON():t,e="function"==typeof i.toJSON?i.toJSON():i;return a.endpoint===e.endpoint&&JSON.stringify(a.keys)===JSON.stringify(e.keys)}async function subscribeToPushNotifications(t){try{const i=await NotificationCache.get();if(i&&!NotificationCache.isExpired(i)){const a=await t.pushManager.getSubscription();if(a&&areSubscriptionsEqual(a,i.subscription))return a}if(!("PushManager"in window))return updateNotificationStatus("Push notifications não suportadas",!0),null;updateNotificationStatus("Verificando registro existente...");const a=await t.pushManager.getSubscription();if(a){const t=await NotificationCache.get();if(t&&areSubscriptionsEqual(a,t.subscription))return a;updateNotificationStatus("Atualizando registro existente...");if(!await sendSubscriptionToServer(a))throw new Error("Falha ao atualizar registro no servidor");return a}const e=urlBase64ToUint8Array(await getVapidPublicKey());updateNotificationStatus("Registrando dispositivo...");const o=await t.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e});updateNotificationStatus("Salvando registro...");if(!await sendSubscriptionToServer(o))throw new Error("Falha ao salvar registro no servidor");return o}catch(t){return updateNotificationStatus("Erro ao registrar notificações",!0),null}}async function sendSubscriptionToServer(t){try{const i=t.toJSON(),a={subscription:{endpoint:i.endpoint,expirationTime:i.expirationTime,keys:i.keys}},e=await fetch("/api/notificacoes/registrar-dispositivo",{method:"POST",credentials:"same-origin",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(e.redirected)return window.location.href=e.url,null;if(!e.ok){if(401===e.status)return sessionStorage.setItem("notification_auth_failed","true"),await NotificationCache.clear(),window.location.href="/login",null;const t=await e.json();throw new Error(t.error||"Erro ao registrar dispositivo")}sessionStorage.removeItem("notification_auth_failed"),await NotificationCache.set(t);const o=document.getElementById("notification-prompt"),n=document.getElementById("notification-success");return n&&o?(n.style.display="flex",o.style.cursor="default",setTimeout((()=>{o.style.opacity="0",setTimeout((()=>{o.style.display="none"}),300)}),3e3)):updateNotificationStatus("Notificações ativadas com sucesso"),await e.json()}catch(t){return updateNotificationStatus("Erro ao salvar registro",!0),null}}function urlBase64ToUint8Array(t){const i=(t+"=".repeat((4-t.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),a=window.atob(i),e=new Uint8Array(a.length);for(let t=0;t<a.length;++t)e[t]=a.charCodeAt(t);return e}async function initializeNotifications(){if(!isInitializing){isInitializing=!0;try{updateNotificationStatus("Iniciando...");if(!await requestNotificationPermission())return;updateNotificationStatus("Configurando service worker...");const t=await registerServiceWorker();if(!t)return void updateNotificationStatus("Falha ao configurar service worker",!0);t.active||(updateNotificationStatus("Ativando service worker..."),await new Promise((i=>{t.active?i():t.addEventListener("activate",(()=>{i()}))})));if(!await subscribeToPushNotifications(t))return void updateNotificationStatus("Falha ao registrar notificações",!0);updateNotificationStatus("Notificações ativadas com sucesso")}catch(t){updateNotificationStatus("Erro ao configurar notificações",!0)}finally{isInitializing=!1}}}let hasInitialized=!1,isInitializing=!1;document.addEventListener("DOMContentLoaded",(async function(){if(window.location.pathname.includes("/login"))return;if(sessionStorage.getItem("notification_auth_failed"))return void await NotificationCache.clear();if(hasInitialized)return;if(await NotificationCache.hasValidCache()&&"granted"===Notification.permission)return;const t=document.getElementById("notification-prompt");"granted"!==Notification.permission||sessionStorage.getItem("notification_auth_failed")?t&&t.addEventListener("click",(async function(){hasInitialized||(hasInitialized=!0,await initializeNotifications())})):(hasInitialized=!0,await initializeNotifications())})),window.addEventListener("load",(function(){window.location.pathname.includes("/login")||sessionStorage.removeItem("notification_auth_failed")}));